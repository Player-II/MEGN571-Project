%% Clears command window and saved Values
clear; close all;
%pyenv('Version', "C:\Users\Chase Robinson\AppData\Local\Programs\Python\Python311\python.exe")  % access python for coolprop stuff 
pyenv('Version',"C:\Users\hayde\AppData\Local\Programs\Python\Python310\python.exe")
%% Set up problem
%% Material Properties of Walls
concrete.k = 1.4;                              % Thermal conductivity of concrete (W/m-K)
concrete.t = 0.1524;                            % Thickness of concrete part of wall (m)

pcm.k = 0.12;                                   % Thermal conductivity of PCM (W/m-K)
pcm.t = 0.0254;                                 % Thickness of PCM layer (m)
pcm.k_solid = 1.85; % (kJ/kg-K)
pcm.k_liquid = 2.384; % (kJ/kg-K)
%pcm.h = 
%pcm.tm =
%pcm.percent =
%pcm.m = 


drywall.k = 0.26;                               % Thermal conductivity of drywall (W/m*K)
drywall.t = 0.0254;                             % Thickness of drywall (m)

insulation.k = 0.025;                           % Thermal conductivity of insulation (W/m*K)
insulation.t = 0.0508;                          % Thickness of insulation (m)

%% Wall Dimensions
wall.A = 1;                  % Surface area of wall (m^2)
wall.L = 1;                  % Length and height of wall (m)
wall.L_x = 1;                % length of wall in x-direction
wall.L_y = 1;                % length of wall in y-direction

%% Heat Generated By Server Racks
Data.center_size = 1e8;                                             % Data center size (W)  
Data.center_servcons = 0.43;                                        % Power consumption percentage for server racks 
Data.center_servpower = Data.center_size*Data.center_servcons;      % Power consumed by server racks (W)

%% External Flow Conditions 
grav = 9.81;                                        % Constant gravity on earth (m/s^2)
air_ext.P = 84000;                                  % Constant pressure based on elevation for Denver (Pa)
air_ext.u_y =  2;                                   % External wind speed (m/s)
air_ext.Re_trans = 3e5;                             % transition Reynolds number (-)


%% Internal Flow Conditions
air_int.T = 23.9 +273.15;           % Internal air temperature (K) 75F
air_int.P = air_ext.P;              % Internal air presure (Pa) 
air_int.u_y =  0;                                   % Internal wind speed (m/s)

%% Heat Equations with changing Temperatures throughout Day in January

time_steps =86400;                               % Total number of time steps
dt = 3600;                                       % Change in time step (s)
time = 1:dt:time_steps;                          % sets up interation algorithm for determining transient wall heat fluxes
Q.conv_ext = zeros(length(time),1);
Q.cond_con = zeros(length(time),1);
Q.cond_ins = zeros(length(time),1);
Q.cond_pcm = zeros(length(time),1);
Q.cond_DW = zeros(length(time),1);
Q.conv_int = zeros(length(time),1);
wall.T_ext = zeros(length(time),1);
wall.T_3 = zeros(length(time),1);
wall.T_2 = zeros(length(time),1);
wall.T_1 = zeros(length(time),1);
wall.T_int = zeros(length(time),1);
air_ext.T = zeros(length(time),1);
air_int.T = 23.9 +273.15;           % Internal air temperature = 297.05K = 23.9C = 75F

T_film_ext = zeros(length(time),1);
Ra_L = zeros(length(time),1);

fluid.mu_ext= zeros(length(time),1);
fluid.k_ext= zeros(length(time),1);
fluid.rho_ext= zeros(length(time),1);
fluid.nu_ext= zeros(length(time),1);
fluid.cp_ext= zeros(length(time),1);
fluid.Pr_ext= zeros(length(time),1);
fluid.alpha_ext= zeros(length(time),1);

fluid.mu_int= zeros(length(time),1);
fluid.k_int= zeros(length(time),1);
fluid.rho_int= zeros(length(time),1);
fluid.nu_int= zeros(length(time),1);
fluid.cp_int= zeros(length(time),1);
fluid.Pr_int= zeros(length(time),1);
fluid.alpha_int= zeros(length(time),1);

%{
air_ext.T(1) = 268.35;    % Temp at 0:00:00 on January 17th 2024
air_ext.T(2) = 268.35;
air_ext.T(3) =  270.05;
air_ext.T(4) = 268.45;
air_ext.T(5) = 269.75;
air_ext.T(6) = 272.05;
air_ext.T(7) = 273.35;
air_ext.T(8) = 273.15;
air_ext.T(9) = 274.95;
air_ext.T(10) = 275.25;
air_ext.T(11) = 274.75;
air_ext.T(12) = 276.65;
air_ext.T(13) = 277.45;
air_ext.T(14) = 279.86;
air_ext.T(15) = 280.95;
air_ext.T(16) = 281.25;
air_ext.T(17) = 280.35;
air_ext.T(18) = 277.55;
air_ext.T(19) = 276.35;
air_ext.T(20) = 274.95;
air_ext.T(21) = 276.05;
air_ext.T(22) = 275.55;
air_ext.T(23) = 275.25;
air_ext.T(24) = 274.25;    % Temp at 23:00:00 on January 17th 2024
%}
%air_ext.T = linspace(290,310,24);
air_ext.T = [19.6,20.2,20.6,20.4,19.2,18.4,19.1,19.5,21.4,23.3,26.8,28.9,30,30.3,29.8,29.3,28.7,27.5,28,26.3,25.3,22.7,21.4,21.4]+273.15;


wall.T_ext(1) = 280;     %initial guess for external wall surface
wall.T_3(1) = 292;      %initial guess for surface between concrete and insulation
wall.T_2(1) = 288;      %initial guess for surface between insulation and pcm
wall.T_1(1) = 295;      %initial guess for surface between pcm and dry wall
wall.T_int(1) =  wall.T_2(1);    %initial guess for drywall surface facing internal conditions April 18th example file 
T_film_ext(1) = 0.5*(wall.T_ext(1)+air_ext.T(1));

fluid.mu_ext(1)  = py.CoolProp.CoolProp.PropsSI("V", "T", T_film_ext(1), "P", air_ext.P, "Air"); % dynamic viscosity [kg/m*s]
fluid.k_ext(1)  = py.CoolProp.CoolProp.PropsSI("L", "T", T_film_ext(1), "P", air_ext.P, "Air"); % thermal conductivity [W/m*K]
fluid.rho_ext(1)  = py.CoolProp.CoolProp.PropsSI("D", "T", T_film_ext(1), "P", air_ext.P, "Air"); % density [kg/m^3]
fluid.nu_ext(1)  = fluid.mu_ext(1)/fluid.rho_ext(1); % kinetmatic viscosity [m^2/s]
fluid.cp_ext(1)  = py.CoolProp.CoolProp.PropsSI("C", "T", T_film_ext(1), "P", air_ext.P, "Air"); % specific heat capacity [J/kg*K]
fluid.Pr_ext(1)  = py.CoolProp.CoolProp.PropsSI("PRANDTL", "T", T_film_ext(1), "P", air_ext.P, "Air"); % Prandtl number [--]
fluid.alpha_ext(1)  = fluid.k_ext(1)/(fluid.rho_ext(1)*fluid.cp_ext(1)); % thermal diffusivity

for i = 1:length(time)
Q.cond_con(i) = (concrete.k*wall.A)*(wall.T_3(i) - wall.T_ext(i))/concrete.t;   % heat transfer rate due to conduction in concrete wall
Q.conv_ext(i) = Q.cond_con(i);                                                     % heat balance at external surface
Q.cond_ins(i) = (insulation.k*wall.A)*(wall.T_2(i) - wall.T_3(i))/insulation.t; % heat transfer rate due to conduction in insulation
Q.cond_con(i) = Q.cond_ins(i);                                                     % heat balance at surface between concrete and insulation
Q.cond_pcm(i) = (pcm.k*wall.A)*(wall.T_1(i) - wall.T_2(i))/pcm.t;               % heat transfer rate due to conduction in pcm shape stabilized board
Q.cond_ins(i) = Q.cond_pcm(i);                                                     % heat balance at surface between pcm and insulation
Q.cond_DW(i)= (drywall.k*wall.A)*(wall.T_int(i)-wall.T_1(i))/drywall.t;        % heat transfer rate due to conduction in drywall
Q.cond_pcm(i) = Q.cond_DW(i);                                                      % heat balance at surface between drywall and pcm

Q.cond_DW(i) = Q.conv_int(i); 


T_film_ext(i) = 0.5*(wall.T_ext(i)+air_ext.T(i));

fluid.mu_ext(i)  = py.CoolProp.CoolProp.PropsSI("V", "T", T_film_ext(i), "P", air_ext.P, "Air"); % dynamic viscosity [kg/m*s]
fluid.k_ext(i)  = py.CoolProp.CoolProp.PropsSI("L", "T", T_film_ext(i), "P", air_ext.P, "Air"); % thermal conductivity [W/m*K]
fluid.rho_ext(i)  = py.CoolProp.CoolProp.PropsSI("D", "T", T_film_ext(i), "P", air_ext.P, "Air"); % density [kg/m^3]
fluid.nu_ext(i)  = fluid.mu_ext(i)/fluid.rho_ext(i); % kinetmatic viscosity [m^2/s]
fluid.cp_ext(i)  = py.CoolProp.CoolProp.PropsSI("C", "T", T_film_ext(i), "P", air_ext.P, "Air"); % specific heat capacity [J/kg*K]
fluid.Pr_ext(i)  = py.CoolProp.CoolProp.PropsSI("PRANDTL", "T", T_film_ext(i), "P", air_ext.P, "Air"); % Prandtl number [--]
fluid.alpha_ext(i)  = fluid.k_ext(i)/(fluid.rho_ext(i)*fluid.cp_ext(i)); % thermal diffusivity

%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L(i) = (grav*fluid.alpha_ext(i)*fluid.rho_ext(i)^2*fluid.cp_ext(i)*abs(wall.T_ext(i) - air_ext.T(i))*wall.L_y^3)/(fluid.k_ext(i)*fluid.mu_ext(i));

% Convective Heat Transfer Coefficient for external flow
if Ra_L <= 1e9  % start of if then else statemen
 air_ext.h(i) = (fluid.k_ext(i)/wall.L_y)*(0.68 + (0.67*Ra_L(i)^(0.25))/(1 +((0.492*fluid.k_ext(i))/(fluid.mu_ext(i)*fluid.cp_ext(i)))^(9/16))^(4/9));
else 
 air_ext.h(i) = (fluid.k_ext(i)/wall.L_y)*(0.825+(0.387*Ra_L(i)^(1/6))/(1 +((0.492*fluid.k_ext(i))/(fluid.mu_ext(i)*fluid.cp_ext(i)))^(9/16))^(8/27));
end
Q.conv_ext(i) = air_ext.h(i)*wall.A*(wall.T_ext(i)-air_ext.T(i));               % heat transfer rate due to external convective forces
%Establish Cantera objects and transport propertiesfor calculations
T_film_int = 0.5*(wall.T_int(i)+air_int.T);

fluid.mu_int(i)  = py.CoolProp.CoolProp.PropsSI("V", "T", T_film_int , "P", air_ext.P, "Air"); % dynamic viscosity [kg/m*s]
fluid.k_int(i)  = py.CoolProp.CoolProp.PropsSI("L", "T", T_film_int , "P", air_ext.P, "Air"); % thermal conductivity [W/m*K]
fluid.rho_int(i)   = py.CoolProp.CoolProp.PropsSI("D", "T", T_film_int , "P", air_ext.P, "Air"); % density [kg/m^3]
fluid.nu_int(i)   = fluid.mu_int(i)/fluid.rho_int(i); % kinetmatic viscosity [m^2/s]
fluid.cp_int(i)   = py.CoolProp.CoolProp.PropsSI("C", "T", T_film_int , "P", air_ext.P, "Air"); % specific heat capacity [J/kg*K]
fluid.Pr_int(i)   = py.CoolProp.CoolProp.PropsSI("PRANDTL", "T", T_film_int , "P", air_ext.P, "Air"); % Prandtl number [--]
fluid.alpha_int(i)   = fluid.k_int(i) /(fluid.rho_int(i) *fluid.cp_int(i)); % thermal diffusivity

%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L_int = (grav*fluid.alpha_int(i)*fluid.rho_int(i).^2*fluid.cp_int(i)*abs(air_int.T - wall.T_int(i))*wall.L_y^3)/(fluid.k_int(i)*fluid.mu_int(i));

% Convective Heat Transfer Coefficient for external flow
if Ra_L_int <= 1e9  % start of if then else statement
 air_int.h(i) = (fluid.k_int(i)/wall.L_y)*(0.68 + (0.67*Ra_L_int^(0.25))/(1 +((0.492*fluid.k_int(i))/(fluid.mu_int(i)*fluid.cp_int(i)))^(9/16))^(4/9));
else  
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.825+(0.387*Ra_L_int^(1/6))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(8/27));
end
Q.conv_int(i) = air_int.h(i)*wall.A*(air_int.T -wall.T_int(i));              % heat transfer due to internal convection
Q.cond_DW(i) = Q.conv_int(i);
Q.cond_ins(i) = Q.conv_int(i);
Q.cond_con(i) = Q.conv_int(i);
R_tot(i) = (drywall.t/(drywall.k*wall.A))+(insulation.t+pcm.t)/(insulation.k*wall.A)+ (concrete.t/(concrete.k*wall.A))+1/(air_ext.h(i)*wall.A);
R_con = (concrete.t/(concrete.k*wall.A));
R_drywall = drywall.t/(drywall.k*wall.A);
R_pcm = (pcm.t/(pcm.k*wall.A));

Q_net(i) = (wall.T_int(1)-air_ext.T(i))/R_tot(i);

%T_3 = Q.conv_int*R_tot+T_int;
%T_ext = Q.cond_con*R_con+T_3;

    %T_wall_ext(i) = 28;
% Q.conv_ext(i) = air.ext_h(i)*A_wall*(wall.T_ext(i)-air_ext.T(i));               % heat transfer rate due to external convective forces
% Q.cond_con(i) = (concrete.k*A_wall)*(wall.T_3(i) - wall.T_ext(i))/concrete.t;   % heat transfer rate due to conduction in concrete wall
% Q.conv_ext(i) = Q.cond_con(i);                                                     % heat balance at external surface
% Q.cond_ins(i) = (insulation.k*A_wall)*(wall.T_2(i) - wall.T_3(i))/insulation.t; % heat transfer rate due to conduction in insulation
% Q.cond_con(i) = Q.cond_ins(i);                                                     % heat balance at surface between concrete and insulation
% Q.cond_pcm(i) = (pcm.k*A_wall)*(wall.T_1(i) - wall.T_2(i))/pcm.t;               % heat transfer rate due to conduction in pcm shape stabilized board
% Q.cond_ins(i) = Q.cond_pcm(i);                                                     % heat balance at surface between pcm and insulation
% Q.cond_DW(i)= (drywall.k*A_wall)*(wall.T_int(i)-wall.T_1(i))/drywall.t;        % heat transfer rate due to conduction in drywall
% Q.cond_pcm(i) = Q.cond_DW(i);                                                      % heat balance at surface between drywall and pcm
% Q.conv_int(i) = air.int_h(i)*A_wall*(air.int.T -wall.T_int(i));              % heat transfer due to internal convection
% Q.cond_DW(i) = Q.conv_int(i);                                                      % heat balance at internal surface (maybe add heatwaste/4 on the right side of the equation to account for q_gen)
end

%% Plot for 
% Plot
figure;
plot(time, Q_net, 'b-', 'LineWidth', 2);
xlabel('Time (s)');
ylabel('Heat Flux Through Wall');
title('Heat Flux through Uniform Wall vs Time');
grid on;

figure;
plot(time, air_ext.T, 'b-', 'LineWidth', 2);
xlabel('Time (s)');
ylabel('External Air Temperature (K)');
title('External Air Temperature vs. Time');
grid on;

%%
% Find inner drywall temperature 

T_1 = R_drywall*Q_net +air_int.T;

%%
% Implement PCM
%pcm.k = 0.12;                                   % Thermal conductivity of PCM (W/m-K)
%pcm.t = 0.0254;                                 % Thickness of PCM layer (m)
pcm.cp_solid = 1.85; % (kJ/kg-K)
pcm.cp_liquid = 2.384; % (kJ/kg-K)
pcm.rho = 856; % (kg/m^3)
%pcm.h = 
%pcm.tm =

pcm.n_x = 101;
pcm.x = linspace(0,pcm.t, pcm.n_x)';
pcm.dx = pcm.x(2) - pcm.x(1);
pcm.dx_cell = pcm.dx*[0.5; ones(pcm.n_x-2,1); 0.5];  % discretized cell distances [m]
pcm.dx_cond_0 =  0.01;  %  Approximate lenght of fittings for conduction resistance at boundaries [m]
%
% Part d)  Set up new numerical simulation solution vector indices
pcm.ind = 1;

pcm.ind_start = (0:pcm.n_x-1)' *pcm.ind;
%
% Set up initial guess assuming linear temperature profile from previous)
SV_0 = zeros(pcm.n_x,1);
%SV_0 = wall.T_1(1)*ones(pcm.n_x,1);
for i = 1:length(Q_net)
    SV_0(:,i) = linspace(wall.T_2(1), air_ext.T(i), pcm.n_x);
%SV_0(1) = T_1(1);
end

%% Implement Shape Stabilized PCM Board 
% Material Properties for pcm
pcm.k = 0.12;                                   % Thermal conductivity of PCM (W/m-K)
pcm.cp_sensible = 3.26;        % sensible heat capacity (k/g-K)
pcm.cp_latent = 62.42;      % (J/g-K)
pcm.rho = 856;              % Density of PCm(kg/m^3)
%pcm.h = 
%pcm.tm =

% Middle Nodes for Numerical Analysis
%{
if pcm.T < 19 + 273.15 % lower limit of phase-change transition temperature (K)
Q.cond_pcmsensible = pcm.m*pcm.cp_sensible*(T(i-1)-T(i)) - pcm.m*pcm.cp_sensible*(T(i)-T(i+1));
elseif pcm.transtemp > 31 + 273.15 % upper limit of phase-change transition temperature (K)
Q.cond_pcmsensible = pcm.m*pcm.cp_sensible*(T(i-1)-T(i)) - pcm.m*pcm.cp_sensible*(T(i)-T(i+1));
else 19+273.15 <= pcm.transtemp <= 31+273.15
    Q.cond_pcmlatent = pcm.m*(h.liquid_pcm - h.solid_pcm);

end
%}
%% Dimensions of SS-PCM Board 

PCMwall.A = 1;                  % Surface area of wall (m^2)
PCMwall.L = 1;                  % Length and height of wall (m)
PCMwall.L_x = 1;                % length of wall in x-direction
PCMwall.L_y = 1;                % length of wall in y-direction

%% Calculating PCM mass in Shape-Stablized PCM Board
pcm.t = 0.0254;                                 % Thickness of PCM layer (m)
pcm.percent = 0.6;                               % Volume percent for pcm

pcm.m = pcm.rho*pcm.percent*wall.A*pcm.t;    % Mass of PCM in SS-PCM wall board (kg)
%pcm.m = 50;

%{
for i = 1:length(time)
    if pcm.T > 298
        Kps = q_conv_ext*wall.A/(pcm.cp_solid*pcm.m);
    end
end
%}
%%
for i = 1:length(Q_net)
    pcm.T_avg(i) = abs(Q_net(i))*R_pcm+T_1(i);
end

for i = 1:length(Q_net)
%with temperature-depedent heat generation
%SV_0(1,1) = T_1(1);



options_solve = optimoptions('fsolve','Algorithm','trust-region-dogleg','display','iter',...
    'SpecifyObjectiveGradient',false,'MaxFunEvals',20000,'MaxIter',200,'TolFun',1e-8,'StepTolerance',1e-9);
pcm_ans = @(T_w) pcm_solve(T_w, pcm, wall, Q_net(i),i);

pcm_ss(:,i) = fsolve(pcm_ans, SV_0(:, i), options_solve);
SV_0(:,i) = pcm_ss(:,i);
%SV_0(1,1) = air_ext.T(i);

end
    %%
% Iterate over each column of pcm_ss
figure
for col = 1:24
    % Find the indices where the value is greater than 292
    indices = find(pcm_ss(:, col) > 292);
    
    % Check if any indices are found
    if ~isempty(indices)
        % Get the index of the first occurrence
        first_index = indices(1);
        
        % Print or use the index as needed
        %{
        if first_index == 0
        shift_values(col) = shift_values(col-1);
        else
        end
        %}
        shift = wall.A*pcm.cp_latent*pcm.rho*pcm.dx*101-abs((((pcm.t-pcm.dx*(101-first_index)))*wall.A*pcm.cp_latent*pcm.rho));

        shift_values(col) = shift(1);
        if 15<=col<=19                          
        money_saved(col) =(shift_values(col)*0.26/1000); %(pcm.m*pcm.cp_latent*(31-19)*0.26/1000)-
        else
            money_saved(col) = (shift_values(col)*0.09/1000);
        end
    else
    end
    hour = ceil(col / (length(Q_net) / 24));
    %shift_values(hour) = shift;
    end
 shift_values(6)=shift_values(5);
 money_saved(6) = money_saved(5);
shift_values = shift_values;
figure
    plot(1:1:24, shift_values, 'b-', 'LineWidth', 2);
    xlabel('Time Throughout Day (hr)');
    ylabel('Energy (J)');
    title('Energy Absorbed by Wall');
    grid on;
figure
    plot(1:1:24, money_saved, 'b-', 'LineWidth', 2);
    xlabel('Time Throughout Day (hr)');
    ylabel('Total Possible Money Saved During an Hour (cents)');
    title('Cost Savings');
    grid on;
%%
figure
plot(time, pcm.T_avg, 'LineWidth', 2);
xlabel('Time (s)');
ylabel('Temperature in PCM vs Time');
title('Temperature Through PCM Material');
%legend('00:00','02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00','09:00', '10:00','11:00','12:00','13:00','14:00','15:00','16:00', '17:00','18:00','19:00','20:00', '21:00','22:00','23:00','24:00');
grid on;
hold on
%%
% Plot discretized pcm results
figure;
for i = 1:24
plot(pcm.x, pcm_ss(:,i), 'LineWidth', 2);
xlabel('x (m)');
ylabel('Temperature Through PCM');
title('Temperature Through PCM Material');
%legend('00:00', '01:00','02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00','09:00', '10:00','11:00','12:00','13:00','14:00','15:00','16:00', '17:00','18:00','19:00','20:00', '21:00','22:00','23:00');

grid on;
hold on

end
%%
%{
Temp_transient = @(t, SV)Temp_axial_transient(t, SV, pcm, wall, Q_net);
[pcm.t_transient, pcm.T_z_t] = ode15s(Temp_transient, time, SV_0);

%Plot results
figure;
plot(0:1:100, pcm.T_z_t, 'b-', 'LineWidth', 2);
xlabel('x (m)');
ylabel('Temperature Through PCM');
title('Temperature Through PCM Material');
grid on;
%}
%%
function [res] = pcm_solve(T_w, pcm, wall, Q, k)
%
%  Initialize residual vector for enery
res = -999*ones(pcm.n_x,1);   %initialize
%
%  Extract temperatures from state variable vector
%T_w = SV(pcm.x);
%T_w = interp1(1:length(SV), SV, pcm.x);
T_w = T_w;

%  Calculate wall heat fluxes through inner tube wall and outer tube wall
%q_w = pcm.dx.*(pcm.k.*(wall.T_1(1)-wall.T_2(1)));
q_w = ones(pcm.n_x,1)*Q;

i_w_cell = (2:pcm.n_x-1);

  res(1) = q_w(1) -(pcm.k*wall.A/pcm.dx)*(T_w(2)-T_w(1));
max_energy_absorbed = pcm.m*pcm.cp_latent*(31-19); % 
pcm_energy = max_energy_absorbed;
%for k = 1:length(time)
%{
for i = 1:length(Q)
if pcm.T_avg(i) <19+273.15
elseif pcm.T_avg(i)>31+273.15
else pcm.T_avg(i+1) = pcm.T_avg(i);

end
%}

for j = 2:length(i_w_cell)
if T_w(j) < 19 + 273.15 % lower limit of phase-change transition temperature (K)
    Q_cond = q_w(k);
    %Q_cond = q_w(j) - pcm.m*pcm.cp_sensible*(T_w(j-1)-T_w(j)) - pcm.m*pcm.cp_sensible*(T_w(j)-T_w(j+1));
    cp = pcm.cp_sensible;
    x = 1;
    res(j) = q_w(j)+((pcm.k*wall.A/pcm.dx)*(T_w(j+1)-2*T_w(j)+T_w(j-1)))/((pcm.m*x*cp)+(pcm.m*x-1*pcm.cp_sensible));
    energy_shift(j) = 0;
elseif T_w(j) > 31 + 273.15 % upper limit of phase-change transition temperature (K)
    Q_cond = q_w(k);
    %Q_cond = q_w(j) - pcm.m*pcm.cp_sensible*(T_w(j-1)-T_w(j)) - pcm.m*pcm.cp_sensible*(T_w(j)-T_w(j+1));
    cp = pcm.cp_sensible;
    x = 0;
    res(j) = (q_w(j)+(pcm.k*wall.A/pcm.dx)*(T_w(j+1)-2*T_w(j)+T_w(j-1)))/((pcm.m*x*cp)+(pcm.m*x-1*pcm.cp_sensible));
    energy_shift(j) = 0;
else
    x_rem(j) = pcm.t-pcm.dx*j;
    energy_shift(j) = x_rem(j)*wall.A*pcm.cp_latent*pcm.rho;
    Q_cond =q_w(1)+ pcm.m*(T_w(j) - T_w(j-1));
    cp = pcm.cp_latent;
    %x = abs((T_w(j)-(31+273.15))/(31-19));
    
    %pcm_energy = pcm_energy-(pcm.m*pcm.cp_latent*(T_w(j)-(273.15+19)));
    
    if pcm_energy > 0
        pcm_energy = pcm_energy-abs(q_w(1)*wall.A*pcm.dx*3600*k);
        res(j) = 0;
        %res(j) = q_w(j) -(pcm.k*wall.A/pcm.dx)*(T_w(j)-T_w(j-1));
        T_w(j) = T_w(j-1);
        x = pcm_energy/max_energy_absorbed;
        %pcm_energy = 
    elseif pcm_energy<=0
        x=0;
        res(j) = (q_w(1)+(pcm.k*wall.A/pcm.dx)*(T_w(j+1)-2*T_w(j)+T_w(j-1)))/((pcm.m*x*cp)+(pcm.m*x-1*pcm.cp_sensible));
    else
        res(j) = res(j-1);

    end
%    x=1;


end

% Calculate energy balance residuals for pcm wall
      %+pcm.rho*pcm.dx*wall.A*pcm.cp_sensible*(T_w(i_w_cell)-T_w(i_w_cell-1));
    end
%end
  res(end) = q_w(end)+(pcm.k*wall.A/pcm.dx)*(T_w(end)-T_w(end-1));
pcm.saved(k) = max(energy_shift);
end
%%
function [dT_dt] = Temp_axial_transient(time, SV, pcm, wall, Q_net)
   Q = Q_net(1);
   dT_dt = pcm_solve(SV, pcm, wall,Q); % (Part c) + 0.3 pts.)
end
