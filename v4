%% Clears command window and saved Values
clear; clear all;
pyenv('Version', "C:\Users\Chase Robinson\AppData\Local\Programs\Python\Python311\python.exe")  % access python for coolprop stuff 
%% Set up problem
%% Material Properties of Walls
concrete.k = 1.4;                              % Thermal conductivity of concrete (W/m-K)
concrete.t = 0.1524;                            % Thickness of concrete part of wall (m)

pcm.k = 0.12;                                   % Thermal conductivity of PCM (W/m-K)
pcm.t = 0.0254;                                 % Thickness of PCM layer (m)
%pcm.h = 
%pcm.tm =
%pcm.percent =
%pcm.m = 


drywall.k = 0.26;                               % Thermal conductivity of drywall (W/m*K)
drywall.t = 0.0254;                             % Thickness of drywall (m)

insulation.k = 0.025;                           % Thermal conductivity of insulation (W/m*K)
insulation.t = 0.0508;                          % Thickness of insulation (m)

%% Wall Dimensions
wall.A = 1;                  % Surface area of wall (m^2)
wall.L = 1;                  % Length and height of wall (m)
wall.L_x = 1;                % length of wall in x-direction
wall.L_y = 1;                % length of wall in y-direction

%% Heat Generated By Server Racks
Data.center_size = 1e8;                                             % Data center size (W)  
Data.center_servcons = 0.43;                                        % Power consumption percentage for server racks 
Data.center_servpower = Data.center_size*Data.center_servcons;      % Power consumed by server racks (W)

%% External Flow Conditions 
grav = 9.81;                                        % Constant gravity on earth (m/s^2)
air_ext.P = 84000;                                  % Constant pressure based on elevation for Denver (Pa)
air_ext.u_y =  2;                                   % External wind speed (m/s)
air_ext.Re_trans = 3e5;                             % transition Reynolds number (-)


%% Internal Flow Conditions
air_int.T = 23.9 +273.15;           % Internal air temperature (K) 75F
air_int.P = air_ext.P;              % Internal air presure (Pa) 
air_int.u_y =  0;                                   % Internal wind speed (m/s)

%% Heat Equations with changing Temperatures throughout Day in January

time_steps =86400;                               % Total number of time steps
dt = 3600;                                       % Change in time step (s)
time = 1:dt:time_steps;                          % sets up interation algorithm for determining transient wall heat fluxes
Q.conv_ext = zeros(length(time),1);
Q.cond_con = zeros(length(time),1);
Q.cond_ins = zeros(length(time),1);
Q.cond_pcm = zeros(length(time),1);
Q.cond_DW = zeros(length(time),1);
Q.conv_int = zeros(length(time),1);
wall.T_ext = zeros(length(time),1);
wall.T_3 = zeros(length(time),1);
wall.T_2 = zeros(length(time),1);
wall.T_1 = zeros(length(time),1);
wall.T_int = zeros(length(time),1);
air_ext.T = zeros(length(time),1);
air_int.T = 23.9 +273.15;           % Internal air temperature = 297.05K = 23.9C = 75F

T_film_ext = zeros(length(time),1);
Ra_L = zeros(length(time),1);

fluid.mu_ext= zeros(length(time),1);
fluid.k_ext= zeros(length(time),1);
fluid.rho_ext= zeros(length(time),1);
fluid.nu_ext= zeros(length(time),1);
fluid.cp_ext= zeros(length(time),1);
fluid.Pr_ext= zeros(length(time),1);
fluid.alpha_ext= zeros(length(time),1);

fluid.mu_int= zeros(length(time),1);
fluid.k_int= zeros(length(time),1);
fluid.rho_int= zeros(length(time),1);
fluid.nu_int= zeros(length(time),1);
fluid.cp_int= zeros(length(time),1);
fluid.Pr_int= zeros(length(time),1);
fluid.alpha_int= zeros(length(time),1);

air_ext.T(1) = 268.35;    % Temp at 0:00:00 on January 17th 2024
air_ext.T(2) = 268.35;
air_ext.T(3) =  270.05;
air_ext.T(4) = 268.45;
air_ext.T(5) = 269.75;
air_ext.T(6) = 272.05;
air_ext.T(7) = 273.35;
air_ext.T(8) = 273.15;
air_ext.T(9) = 274.95;
air_ext.T(10) = 275.25;
air_ext.T(11) = 274.75;
air_ext.T(12) = 276.65;
air_ext.T(13) = 277.45;
air_ext.T(14) = 279.86;
air_ext.T(15) = 280.95;
air_ext.T(16) = 281.25;
air_ext.T(17) = 280.35;
air_ext.T(18) = 277.55;
air_ext.T(19) = 276.35;
air_ext.T(20) = 274.95;
air_ext.T(21) = 276.05;
air_ext.T(22) = 275.55;
air_ext.T(23) = 275.25;
air_ext.T(24) = 274.25;    % Temp at 23:00:00 on January 17th 2024

wall.T_ext(1) = 280;     %initial guess for external wall surface
wall.T_3(1) = 292;      %initial guess for surface between concrete and insulation
wall.T_2(1) = 294;      %initial guess for surface between insulation and pcm
wall.T_1(1) = 295;      %initial guess for surface between pcm and dry wall
wall.T_int(1) =  296;    %initial guess for drywall surface facing internal conditions April 18th example file 
T_film_ext(1) = 0.5*(wall.T_ext(1)+air_ext.T(1));

fluid.mu_ext(1)  = py.CoolProp.CoolProp.PropsSI("V", "T", T_film_ext(1), "P", air_ext.P, "Air"); % dynamic viscosity [kg/m*s]
fluid.k_ext(1)  = py.CoolProp.CoolProp.PropsSI("L", "T", T_film_ext(1), "P", air_ext.P, "Air"); % thermal conductivity [W/m*K]
fluid.rho_ext(1)  = py.CoolProp.CoolProp.PropsSI("D", "T", T_film_ext(1), "P", air_ext.P, "Air"); % density [kg/m^3]
fluid.nu_ext(1)  = fluid.mu_ext(1)/fluid.rho_ext(1); % kinetmatic viscosity [m^2/s]
fluid.cp_ext(1)  = py.CoolProp.CoolProp.PropsSI("C", "T", T_film_ext(1), "P", air_ext.P, "Air"); % specific heat capacity [J/kg*K]
fluid.Pr_ext(1)  = py.CoolProp.CoolProp.PropsSI("PRANDTL", "T", T_film_ext(1), "P", air_ext.P, "Air"); % Prandtl number [--]
fluid.alpha_ext(1)  = fluid.k_ext(1)/(fluid.rho_ext(1)*fluid.cp_ext(1)); % thermal diffusivity

for i = 2:length(time)
Q.cond_con(i) = (concrete.k*wall.A)*(wall.T_3(i) - wall.T_ext(i))/concrete.t;   % heat transfer rate due to conduction in concrete wall
Q.conv_ext(i) = Q.cond_con(i);                                                     % heat balance at external surface
Q.cond_ins(i) = (insulation.k*wall.A)*(wall.T_2(i) - wall.T_3(i))/insulation.t; % heat transfer rate due to conduction in insulation
Q.cond_con(i) = Q.cond_ins(i);                                                     % heat balance at surface between concrete and insulation
Q.cond_pcm(i) = (pcm.k*wall.A)*(wall.T_1(i) - wall.T_2(i))/pcm.t;               % heat transfer rate due to conduction in pcm shape stabilized board
Q.cond_ins(i) = Q.cond_pcm(i);                                                     % heat balance at surface between pcm and insulation
Q.cond_DW(i)= (drywall.k*wall.A)*(wall.T_int(i)-wall.T_1(i))/drywall.t;        % heat transfer rate due to conduction in drywall
Q.cond_pcm(i) = Q.cond_DW(i);                                                      % heat balance at surface between drywall and pcm

Q.cond_DW(i) = Q.conv_int(i); 


T_film_ext(i) = 0.5*(wall.T_ext(i)+air_ext.T(i));

fluid.mu_ext(i)  = py.CoolProp.CoolProp.PropsSI("V", "T", T_film_ext(i), "P", air_ext.P, "Air"); % dynamic viscosity [kg/m*s]
fluid.k_ext(i)  = py.CoolProp.CoolProp.PropsSI("L", "T", T_film_ext(i), "P", air_ext.P, "Air"); % thermal conductivity [W/m*K]
fluid.rho_ext(i)  = py.CoolProp.CoolProp.PropsSI("D", "T", T_film_ext(i), "P", air_ext.P, "Air"); % density [kg/m^3]
fluid.nu_ext(i)  = fluid.mu_ext(i)/fluid.rho_ext(i); % kinetmatic viscosity [m^2/s]
fluid.cp_ext(i)  = py.CoolProp.CoolProp.PropsSI("C", "T", T_film_ext(i), "P", air_ext.P, "Air"); % specific heat capacity [J/kg*K]
fluid.Pr_ext(i)  = py.CoolProp.CoolProp.PropsSI("PRANDTL", "T", T_film_ext(i), "P", air_ext.P, "Air"); % Prandtl number [--]
fluid.alpha_ext(i)  = fluid.k_ext(i)/(fluid.rho_ext(i)*fluid.cp_ext(i)); % thermal diffusivity

%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L(i) = (grav*fluid.alpha_ext(i)*fluid.rho_ext(i)^2*fluid.cp_ext(i)*abs(wall.T_ext(i) - air_ext.T(i))*wall.L_y^3)/(fluid.k_ext(i)*fluid.mu_ext(i));

% Convective Heat Transfer Coefficient for external flow
if Ra_L <= 1e9  % start of if then else statemen
 air_ext.h(i) = (fluid.k_ext(i)/wall.L_y)*(0.68 + (0.67*Ra_L(i)^(0.25))/(1 +((0.492*fluid.k_ext(i))/(fluid.mu_ext(i)*fluid.cp_ext(i)))^(9/16))^(4/9));
else 
 air_ext.h(i) = (fluid.k_ext(i)/wall.L_y)*(0.825+(0.387*Ra_L(i)^(1/6))/(1 +((0.492*fluid.k_ext(i))/(fluid.mu_ext(i)*fluid.cp_ext(i)))^(9/16))^(8/27));
end
Q.conv_ext(i) = air.ext_h(i)*wall.A*(wall.T_ext(i)-air_ext.T(i));               % heat transfer rate due to external convective forces
%Establish Cantera objects and transport propertiesfor calculations
T_film_int = 0.5*(wall.T_int(i)+air_int.T);

fluid.mu_int(i)  = py.CoolProp.CoolProp.PropsSI("V", "T", T_film_int , "P", air_ext.P, "Air"); % dynamic viscosity [kg/m*s]
fluid.k_int(i)  = py.CoolProp.CoolProp.PropsSI("L", "T", T_film_int , "P", air_ext.P, "Air"); % thermal conductivity [W/m*K]
fluid.rho_int(i)   = py.CoolProp.CoolProp.PropsSI("D", "T", T_film_int , "P", air_ext.P, "Air"); % density [kg/m^3]
fluid.nu_int(i)   = fluid.mu_int/fluid.rho_int ; % kinetmatic viscosity [m^2/s]
fluid.cp_int(i)   = py.CoolProp.CoolProp.PropsSI("C", "T", T_film_int , "P", air_ext.P, "Air"); % specific heat capacity [J/kg*K]
fluid.Pr_int(i)   = py.CoolProp.CoolProp.PropsSI("PRANDTL", "T", T_film_int , "P", air_ext.P, "Air"); % Prandtl number [--]
fluid.alpha_int(i)   = fluid.k_int /(fluid.rho_int *fluid.cp_int); % thermal diffusivity

%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L_int(i) = (grav*fluid.alpha_int*fluid.rho_int^2*fluid.cp_int*abs(air_int.T - wall.T_int(i))*wall.L_y^3)/(fluid.k_int*fluid.mu_int);

% Convective Heat Transfer Coefficient for external flow
if Ra_L_int(i) <= 1e9  % start of if then else statement
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.68 + (0.67*Ra_L_int^(0.25))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(4/9));
else  
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.825+(0.387*Ra_L_int^(1/6))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(8/27));
end
Q.conv_int(i) = air.int_h(i)*wall.A*(air.int.T -wall.T_int(i));              % heat transfer due to internal convection
    %T_wall_ext(i) = 28;
% Q.conv_ext(i) = air.ext_h(i)*A_wall*(wall.T_ext(i)-air_ext.T(i));               % heat transfer rate due to external convective forces
% Q.cond_con(i) = (concrete.k*A_wall)*(wall.T_3(i) - wall.T_ext(i))/concrete.t;   % heat transfer rate due to conduction in concrete wall
% Q.conv_ext(i) = Q.cond_con(i);                                                     % heat balance at external surface
% Q.cond_ins(i) = (insulation.k*A_wall)*(wall.T_2(i) - wall.T_3(i))/insulation.t; % heat transfer rate due to conduction in insulation
% Q.cond_con(i) = Q.cond_ins(i);                                                     % heat balance at surface between concrete and insulation
% Q.cond_pcm(i) = (pcm.k*A_wall)*(wall.T_1(i) - wall.T_2(i))/pcm.t;               % heat transfer rate due to conduction in pcm shape stabilized board
% Q.cond_ins(i) = Q.cond_pcm(i);                                                     % heat balance at surface between pcm and insulation
% Q.cond_DW(i)= (drywall.k*A_wall)*(wall.T_int(i)-wall.T_1(i))/drywall.t;        % heat transfer rate due to conduction in drywall
% Q.cond_pcm(i) = Q.cond_DW(i);                                                      % heat balance at surface between drywall and pcm
% Q.conv_int(i) = air.int_h(i)*A_wall*(air.int.T -wall.T_int(i));              % heat transfer due to internal convection
% Q.cond_DW(i) = Q.conv_int(i);                                                      % heat balance at internal surface (maybe add heatwaste/4 on the right side of the equation to account for q_gen)
end

%% Plot for 
% Plot
figure;
plot(time, Q.conv_ext, 'b-', 'LineWidth', 2);
xlabel('Time (s)');
ylabel('Inside Air Temperature (°C)');
title('Inside Air Temperature vs. Time');
grid on;
