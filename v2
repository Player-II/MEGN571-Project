%% Clears command window and saved Values
clear; clear all;
%% Set up problem
%% Material Properties of Walls
concrete.k = 1.4;                              % Thermal conductivity of concrete (W/m-K)
concrete.t = 0.1524;                            % Thickness of concrete part of wall (m)

pcm.k = 0.12;                                   % Thermal conductivity of PCM (W/m-K)
pcm.t = 0.0254;                                 % Thickness of PCM layer (m)
%pcm.h = 
%pcm.tm =
%pcm.percent =
%pcm.m = 


drywall.k = 0.26;                               % Thermal conductivity of drywall (W/m*K)
drywall.t = 0.0254;                             % Thickness of drywall (m)

insulation.k = 0.025;                           % Thermal conductivity of insulation (W/m*K)
insulation.t = 0.0508;                          % Thickness of insulation (m)

%% Wall Dimensions
wall.A = 1;                  % Surface area of wall (m^2)
wall.L = 1;                  % Length and height of wall (m)
wall.L_x = 1;                % length of wall in x-direction
wall.L_y = 1;                % length of wall in y-direction

%% Heat Generated By Server Racks
Data.center_size = 1e8;                                             % Data center size (W)  
Data.center_servcons = 0.43;                                        % Power consumption percentage for server racks 
Data.center_servpower = Data.center_size*Data.center_servcons;      % Power consumed by server racks (W)

%% External Flow Conditions 
grav = 9.81;                                        % Constant gravity on earth (m/s^2)
air_ext.P = 84000;                                  % Constant pressure based on elevation for Denver (Pa)
air_ext.u_y =  2;                                   % External wind speed (m/s)
air_ext.Re_trans = 3e5;                             % transition Reynolds number (-)

%% External air Properties of Air as dry ideal gas 
time_steps =86400;                               % Total number of time steps
dt = 3600;                                       % Change in time step (s)
time = 0:dt:time_steps;                          % sets up interation algorithm for determining transient wall heat fluxes



%Establish Cantera objects and transport propertiesfor calculations
fluid.obj = Solution('air.xml','air');
set(fluid.obj, 'P', air_ext.P, 'T', 0.5*(wall.T_ext(i) + air_ext.T(i)))
fluid.mu = viscosity(fluid.obj); % dynamic viscosity [kg/m*s]
fluid.k = thermalConductivity(fluid.obj); % thermal conductivity [W/m*K]
fluid.rho = density(fluid.obj); % density [kg/m^3]
fluid.nu = fluid.mu/fluid.rho; % kinetmatic viscosity [m^2/s]
fluid.cp = cp_mass(fluid.obj); % specific heat capacity [J/kg*K]
fluid.Pr = fluid.mu*fluid.cp/fluid.k; % Prandtl number [--]
fluid.alpha = fluid.k/(fluid.rho*fluid.cp); % thermal diffusivity

for i =1:1:length(time)
    t = time(i);
%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L = (grav*fluid.alpha*fluid.rho^2*fluid.cp*abs(wall.T_ext(i) - air_ext.T(i))*wall.L_y^3)/(fluid.k*fluid.mu);

% Convective Heat Transfer Coefficient for external flow
if Ra_L(i) <= 1e9  % start of if then else statement
 air_ext.h(i) = (fluid.k/wall.L_y)*(0.68 + (0.67*Ra_L(i)^(0.25))/(1 +((0.492*fluid.k)/(fluid.mu*fluid.cp))^(9/16))^(4/9));
else 
 air_ext.h(i) = (fluid.k/wall.L_y)*(0.825+(0.387*Ra_L(i)^(1/6))/(1 +((0.492*fluid.k)/(fluid.mu*fluid.cp))^(9/16))^(8/27));
end
end

%% Internal Flow Conditions
air_int.T = 23.9 +273.15;           % Internal air temperature (K) 75F
air_int.P = air_ext.P;              % Internal air presure (Pa) 

%Establish Cantera objects and transport propertiesfor calculations
fluid.obj_int = Solution('air.xml','air');
set(fluid.obj_int, 'P', air_int.P, 'T', 0.5*(wall.T_int(i) + air_int.T))
fluid.mu_int = viscosity(fluid.obj_int); % dynamic viscosity [kg/m*s]
fluid.k_int = thermalConductivity(fluid.obj_int); % thermal conductivity [W/m*K]
fluid.rho_int = density(fluid.obj_int); % density [kg/m^3]
fluid.nu_int = fluid.mu_int/fluid.rho_int; % kinetmatic viscosity [m^2/s]
fluid.cp_int = cp_mass(fluid.obj_int); % specific heat capacity [J/kg*K]
fluid.Pr_int = fluid.mu_int*fluid.cp_int/fluid.k_int; % Prandtl number [--]
fluid.alpha_int = fluid.k_int/(fluid.rho_int*fluid.cp_int); % thermal diffusivity


for i =1:1:length(time)
    t = time(i);
%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L_int(i) = (grav*fluid.alpha_int*fluid.rho_int^2*fluid.cp_int*abs(air_int.T - wall.T_int(i))*wall.L_y^3)/(fluid.k_int*fluid.mu_int);

% Convective Heat Transfer Coefficient for external flow
if Ra_L_int(i) <= 1e9  % start of if then else statement
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.68 + (0.67*Ra_L_int^(0.25))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(4/9));
else  
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.825+(0.387*Ra_L_int^(1/6))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(8/27));
end
end

%% Heat Equations with changing Temperatures throughout Day in January


Q.conv_ext = zeros(length(time),1);
Q.cond_con = zeros(length(time),1);
Q.cond_ins = zeros(length(time),1);
Q.cond_pcm = zeros(length(time),1);
Q.cond_DW = zeros(length(time),1);
Q.conv_int = zeros(length(time),1);
wall.T_ext = zeros(length(time),1);
wall.T_3 = zeros(length(time),1);
wall.T_2 = zeros(length(time),1);
wall.T_1 = zeros(length(time),1);
wall.T_int = zeros(length(time),1);
air_ext.T = zeros(length(time),1);
air_int.T = 23.9 +273.15;           % Internal air temperature = 296.9K = 23.9C = 75F

air_ext.T(1) = -4.8;    % Temp at 0:00:00 on January 17th 2024
air_ext.T(2) = -4.8;
air_ext.T(3) = -3.1;
air_ext.T(4) = -4.7;
air_ext.T(5) = -3.4;
air_ext.T(6) = -1.1;
air_ext.T(7) = 0.2;
air_ext.T(8) = 0;
air_ext.T(9) = 1.8;
air_ext.T(10) = 2.1;
air_ext.T(11) = 1.6;
air_ext.T(12) = 3.5;
air_ext.T(13) = 4.3;
air_ext.T(14) = 6.7;
air_ext.T(15) = 7.8;
air_ext.T(16) = 8.1;
air_ext.T(17) = 7.2;
air_ext.T(18) = 4.4;
air_ext.T(19) = 3.2;
air_ext.T(20) = 1.8;
air_ext.T(21) = 2.9;
air_ext.T(22) = 2.4;
air_ext.T(23) = 2.1;
air_ext.T(24) = 1.1;    % Temp at 23:00:00 on January 17th 2024

wall.T_ext(1) = 350     %initial guess for external wall surface
wall.T_3(1) = 300      %initial guess for surface between concrete and insulation
wall.T_2(1) = 300      %initial guess for surface between insulation and pcm
wall.T_1(1) = 300      %initial guess for surface between pcm and dry wall
wall.T_int(1) =  300     %initial guess for drywall surface facing internal conditions April 18th example file 

for i = 2:length(time)

%Establish Cantera objects and transport propertiesfor calculations
fluid.obj = Solution('air.xml','air');
set(fluid.obj, 'P', air_ext.P, 'T', 0.5*(wall.T_ext(i) + air_ext.T(i)))
fluid.mu = viscosity(fluid.obj); % dynamic viscosity [kg/m*s]
fluid.k = thermalConductivity(fluid.obj); % thermal conductivity [W/m*K]
fluid.rho = density(fluid.obj); % density [kg/m^3]
fluid.nu = fluid.mu/fluid.rho; % kinetmatic viscosity [m^2/s]
fluid.cp = cp_mass(fluid.obj); % specific heat capacity [J/kg*K]
fluid.Pr = fluid.mu*fluid.cp/fluid.k; % Prandtl number [--]
fluid.alpha = fluid.k/(fluid.rho*fluid.cp); % thermal diffusivity

%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L = (grav*fluid.alpha*fluid.rho^2*fluid.cp*abs(wall.T_ext(i) - air_ext.T(i))*wall.L_y^3)/(fluid.k*fluid.mu);

% Convective Heat Transfer Coefficient for external flow
if Ra_L(i) <= 1e9  % start of if then else statement
 air_ext.h(i) = (fluid.k/wall.L_y)*(0.68 + (0.67*Ra_L(i)^(0.25))/(1 +((0.492*fluid.k)/(fluid.mu*fluid.cp))^(9/16))^(4/9));
else 
 air_ext.h(i) = (fluid.k/wall.L_y)*(0.825+(0.387*Ra_L(i)^(1/6))/(1 +((0.492*fluid.k)/(fluid.mu*fluid.cp))^(9/16))^(8/27));
end

%Establish Cantera objects and transport propertiesfor calculations
fluid.obj_int = Solution('air.xml','air');
set(fluid.obj_int, 'P', air_int.P, 'T', 0.5*(wall.T_int(i) + air_int.T))
fluid.mu_int = viscosity(fluid.obj_int); % dynamic viscosity [kg/m*s]
fluid.k_int = thermalConductivity(fluid.obj_int); % thermal conductivity [W/m*K]
fluid.rho_int = density(fluid.obj_int); % density [kg/m^3]
fluid.nu_int = fluid.mu_int/fluid.rho_int; % kinetmatic viscosity [m^2/s]
fluid.cp_int = cp_mass(fluid.obj_int); % specific heat capacity [J/kg*K]
fluid.Pr_int = fluid.mu_int*fluid.cp_int/fluid.k_int; % Prandtl number [--]
fluid.alpha_int = fluid.k_int/(fluid.rho_int*fluid.cp_int); % thermal diffusivity

%Calculate Rayleigh's number (Ref: Fundamentals of Heat and Mass Transfer)
Ra_L_int(i) = (grav*fluid.alpha_int*fluid.rho_int^2*fluid.cp_int*abs(air_int.T - wall.T_int(i))*wall.L_y^3)/(fluid.k_int*fluid.mu_int);

% Convective Heat Transfer Coefficient for external flow
if Ra_L_int(i) <= 1e9  % start of if then else statement
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.68 + (0.67*Ra_L_int^(0.25))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(4/9));
else  
 air_int.h(i) = (fluid.k_int/wall.L_y)*(0.825+(0.387*Ra_L_int^(1/6))/(1 +((0.492*fluid.k_int)/(fluid.mu_int*fluid.cp_int))^(9/16))^(8/27));
end

    %T_wall_ext(i) = 28;
Q.conv_ext(i) = air.ext_h(i)*A_wall*(wall.T_ext(i)-air_ext.T(i));               % heat transfer rate due to external convective forces
Q.cond_con(i) = (concrete.k*A_wall)*(wall.T_3(i) - wall.T_ext(i))/concrete.t;   % heat transfer rate due to conduction in concrete wall
Q.conv_ext(i) = Q.cond_con(i);                                                     % heat balance at external surface
Q.cond_ins(i) = (insulation.k*A_wall)*(wall.T_2(i) - wall.T_3(i))/insulation.t; % heat transfer rate due to conduction in insulation
Q.cond_con(i) = Q.cond_ins(i);                                                     % heat balance at surface between concrete and insulation
Q.cond_pcm(i) = (pcm.k*A_wall)*(wall.T_1(i) - wall.T_2(i))/pcm.t;               % heat transfer rate due to conduction in pcm shape stabilized board
Q.cond_ins(i) = Q.cond_pcm(i);                                                     % heat balance at surface between pcm and insulation
Q.cond_DW(i)= (drywall.k*A_wall)*(wall.T_int(i)-wall.T_1(i))/drywall.t;        % heat transfer rate due to conduction in drywall
Q.cond_pcm(i) = Q.cond_DW(i);                                                      % heat balance at surface between drywall and pcm
Q.conv_int(i) = air.int_h(i)*A_wall*(air.int.T -wall.T_int(i));              % heat transfer due to internal convection
Q.cond_DW(i) = Q.conv_int(i);                                                      % heat balance at internal surface (maybe add heatwaste/4 on the right side of the equation to account for q_gen)
end


%% Thermal Resitances for Data Center Wall

concrete.R_w = concrete.t/(A_wall*concrete.k);    % Thermal Resistance of concrete
pcm.R_w = pcm.t/(A_wall*pcm.k);                   % Thermal Resistance of PCM
air_int.R = 1/(A_wall*air_int.h);               % Thermal resistance of internal air
air_ext.R = 1/(A_wall*air_ext.h);               % Thermal resistance of external air
